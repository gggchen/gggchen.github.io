<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on G Chen</title>
    <link>http://gggchen.github.io/post/</link>
    <description>Recent content in Posts on G Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Chen</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://gggchen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019 读书总结</title>
      <link>http://gggchen.github.io/post/books2019/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/books2019/</guid>
      <description>Fluent forever 不仅介绍了学语言的规律而且总结了如何学习.
比如推荐了分辨语言中难易辨别音的方法, 之前我从来没有搞明白过德语的 e 和 i 有什么区别, 我尝试用他介绍的方法, 把这两个音放在 Anki 卡片里, 听音做选择, 并没有收获. 后来看又看了一些资料终于明白了.
还介绍了怎么背单词, 当然是利用类似 Anki 的卡片间隔重复记忆, 关键是他总结了一套记单词的一套工作流程. 我真的服气了, 我本来想写个博客来介绍我的背单词流程, 和这本书一比起来就是 nothing, 他也早写好博客 并且做好视频教程了, 甚至还有配套的 Anki 的模板, 在 Download and install my model deck 中可以找到下载.
 用 Eudic 等词典查单词意思以及音标 利用 https://forvo.com/ 下载单词发音 谷歌搜索这个单词相关的图片, 因为大脑更容易记住图形 然后在 Anki 里面背单词, 自动规律间断重复  另外一个收获是, 一张卡片最好只记忆一个东西. 单词有时有几个记忆点时, 我应该把单词分开背, 一次只背一项. 现在我背德语, 一张卡片记忆德语对应的含义, 第二张卡片记忆含义对应的德语, 第三张卡片记忆该德语名词的复数, 这样不会盯着一张卡片想完成三个动作, 然后崩溃, 再也不想背了. 我之前很多次痛苦的学习记忆就是一张卡片想背的东西太多.
《娱乐至死》 这本书写了电视的出现对书本作为传播媒介的影响, 技术从来不是中立的, 技术和工具会束缚限制塑造我的思维</description>
    </item>
    
    <item>
      <title>我的 MacOS 应用</title>
      <link>http://gggchen.github.io/post/macos-application/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/macos-application/</guid>
      <description>编辑器  Emacs: 免费, 最常用的编辑器了, 用 org-mode 记笔记, ess 运行 R 语言, 爱不释手. 虽然配置和学习麻烦了些, 用了好多年了, 但是每次想改动什么的时候, 还是发现自己是个新手. sublime: 付费, 最常用的功能是多行同时编辑并且合并. MacDown: 免费, Markdown 编辑器, 虽然 Emacs 也可以编辑 Markdown, 有时候还是想所见即所得  Menu bar 常驻  Hammerspoon: 免费, 功能丰富, 我用来快速启动应用和管理窗口大小. 比如使用 左边的 option 键作为 meta 键, option + m 快速启动 emacs. 缩放窗口定义为 option + f 当前活跃窗口到最大. 可以参考我的配置文件 .hammerspoon Karabiner-Elements: 免费, 改键工具, 上一次 MacOS 升级到 macOS High Sierra 之后, Karabiner 不能兼容, 我这才发现这个软件对我多么重要, 只好回退了 MacOS 的版本.</description>
    </item>
    
    <item>
      <title>Use Emacs as R IDE</title>
      <link>http://gggchen.github.io/post/emacs_as_r_ide/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/emacs_as_r_ide/</guid>
      <description>如果机器能让我省一秒钟，我愿意用两天去寻找它
祝佳音, 科技作者，触乐创始人https://liqi.io/zhujiayin/
 R 的环境选择很多, 有人使用原生的 R, 更多人用的 RStudio, 甚至 Eclisp, Vim 也有结合 R 使用的插件. 工具有时候并不重要, 比如本人导师, 在用 Basic R, 但是并不影响他 R 水平比我不知道高到哪里去了. 但是我在使用 Emcas 的过程中还是体会到很多方便, 我也习惯了不使用鼠标, RStudio 每次切换 tab 都让我苦找, 尤其是打开的 tab 极其多的时候, 而且 IDE 打开还是太重, 不如编辑器灵活. 当然 Emacs 也有缺点, 比如配置麻烦, 但是配置的问题可以通过使用一些新手友好的 start kit 解决, 比如 Spacemacs. 虽然新手友好了, 但是本文仍然是面向不怕麻烦的人, 的确会让写代码快捷很多, 但是在此之前需要解决各种出其不意, 也要能折腾. 即使配置麻烦, 现在每天我还没完全配置好我的 Emacs, 但是我仍然愿意一直用它. 因为如果一个工具能让我每天节省一秒, 我也愿意花一个月来学习它.
视频教程:Bilibili.
Environment setup 我想 Linux 或者 BSD 用户不需要讲太多, 直接 Google 安装就完事了, 但是 Mac OS 和 Windows 操作系统的用户还是需要告知怎样安装环境.</description>
    </item>
    
    <item>
      <title>我的 Podcast 节目收听列表</title>
      <link>http://gggchen.github.io/post/podcast/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/podcast/</guid>
      <description>我收听的 Podcast 列表不完全归纳, 按照「想到哪写到哪」排序. 有次见到同学的播客应用的截屏, 和我收听的节目重合很高, 也许中文节目就那么些吧, 因此觉得收听播客关注列表大同小异. 目前使用 Overcast 和苹果自带的博客客户端收听博客, 苹果自带的客户端有收听该节目的人也收听节目推荐, 也是发现新节目的很好途径.
Aspirin FM 三个互相了解的好朋友聊天, 互相开一些玩笑. 有主题但是经常跑题但并不是缺点. 听起来很放松, 如果更新了经常把这个播客最早播放, 因为欢快又轻松. 曾经有几期讲了 A 君和 D 小姐的爱情故事, 让我大开眼界.
Blow your mind 简里里和峰哥这对伴侣太让人羡慕, 听两个人聊天很有启发性. 印象深刻的有之前的峰哥讲故事, 峰哥小本本和最近简里里的女性系列. 峰哥用数学角度解释问题, 很对我胃口又耳目一新, 简里里用心理学来解释问题, 很治愈我的心理焦虑和不安.
迟早更新 有书评, 游记, 博物馆参观体验还有个人小感悟等, 如果我要做一个播客, 这就是我想要做的播客啊. 过年的时候会有迟早过年系列, 从这个节目得到很多好书推荐, 比如枪枪推荐的《现代艺术150年》.
内核恐慌 一听再听反复收听的博客, 之前有一期两个人在编辑器巡礼中聊了 Vim 键位原理, 两种 mode 的编辑模式, 后来我再学 Vim 才上手无障碍. 后来一年才更新一期, 只好把历史节目拿出来反复收听.
字谈字畅 讲了很多字体排印设计相关的话题, 培养了我一些字体美感的认识, 让我自己也买了平头笔, 试着自己练一练英语的书法. 后来我非参数统计学到了样条(Spline), 很惊奇地发现计算机字母形状的保存是靠样条来做的.
社会人科技评论 讨论的很多话题都很感兴趣, 比如无人机和人工智能.</description>
    </item>
    
    <item>
      <title>Shadowsocks 与 科学上网</title>
      <link>http://gggchen.github.io/post/climb-wall/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/climb-wall/</guid>
      <description>为什么要翻墙。我当初翻墙只是因为想用 Google 和看 porn。就像播客NTP #38 科學上網指南里讲的那样，翻墙能让你获得完整的互联网体验，而不是阉割版本的。顺便一提，这个播客基本涵盖了科学上网的各个方面，推荐收听。
翻墙方法有很多，比如 VPN 和 shadowsocks。我不选择 VPN 主要因为 VPN 只能全局代理。也就是访问国外网站也是利用国外服务器访问，高延迟会让体验很不舒服。而shadowsocks 可以设置使用代理的网址列表。在列表内的使用代理翻墙，国内网站不用 shadowsocks 直接访问，速度会快得多。
如何搭建 shadowsocks 翻墙的基本思路为，既然国内的电脑无法访问国外网站如 Twitter，那就让国内电脑通过国外一台电脑为代理，访问国外网站 Twitter 再把这部分信息传递回国内电脑。所以需要国外一台电脑Virtual Private Server(VPS) 用来做代理访问国外网站，shadowsocks 为连接本地电脑和国外电脑的工具，需要安装在本地和国外电脑上，用来联通本地和国外。
建立 VPS VPS 可选的服务提供商有很多。我自己因为 Github 学生计划的优惠最开始使用了 Digital Ocean 后来就一直路径依赖使用下来了。 Digital Ocean 也提供了丰富的文档来介绍如何使用自家的产品，比如如何创建一个服务器，一般最便宜的方案 5 美元每月已经够用了，DO 还提供了测速工具来选择哪个地区的服务器能更快连接。 服务器的初始设置 以 Ubuntu 为例介绍了刚建立的服务器如何设置防火墙等让自己更安全。
其他 VPS 服务商还有比如 vultr 和 Google Cloud。如果决定使用 DO 为服务提供商，不妨使用我的分享链接 注册，这样我会因为你的使用而获得收益。
建立 shadowsocks 以 Ubuntu 为例介绍如何在服务器端安装 shadowsocks：
apt-get install python-pip pip install shadowsocks  接下来需要配置 shadowsocks，使用 nano 打开配置文件： /etc/shadowsocks.</description>
    </item>
    
    <item>
      <title>用爬虫批量下载课程主页的课件</title>
      <link>http://gggchen.github.io/post/scraping/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/scraping/</guid>
      <description>问题描述 最近在看 Meshfree 拟合函数的方法, 教材 需要用到的 Matlab 代码和数据有在课程主页上. 要跑每个代码需要先下载到本地. 简单的方法, 可以每个文件单独点击下载. 但是我懒得这样做(而且想练习一下之前看的爬虫), 所以写了程序来批量下载所有数据文件.
所以问题是, 已知一个网页, 网页上有链接指向想要下载的文件, 需要过滤得到需要文件的网址, 下载保存到本地.
问题解决 使用 Python3.6
from urllib.request import urlretrieve from urllib.request import urlopen from bs4 import BeautifulSoup import re downloadDirectory = &#39;/Users/Username/Documents/meshfree/matlab-code/&#39; baseUrl = &#39;http://www.math.iit.edu/~fass/590/handouts/&#39; # open url and filter it to get a list of file names to be downloaded html = urlopen(baseUrl) bs = BeautifulSoup(html, &#39;html.parser&#39;) downloadList = bs.findAll(&amp;quot;a&amp;quot;, href=re.compile(&amp;quot;^[A-Za-z0-9_+]+\.[a-z+]+$&amp;quot;)) # download files for download in downloadList: path = download.</description>
    </item>
    
    <item>
      <title>朗读者</title>
      <link>http://gggchen.github.io/post/the-reader/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/the-reader/</guid>
      <description>读了《朗读者》小说, 发现了一些电影中没有说明的细节.
剧情 十五岁的学生米夏在回家路上偶遇了三十六岁的汉娜, 两个人成为情人. 米夏每天放学先去去汉娜家给汉娜读书, 然后两人洗澡, 做爱. 汉娜在一天突然离开, 米夏很久之后才把汉娜忘掉, 却再也没法爱别人.
米夏进了大学读法律, 再次看到汉娜是二战之后在法庭上, 汉娜作为关押犹太人的看守而被审判. 汉娜被指控终身监禁. 米夏后来一直继续为汉娜朗读小说, 把录音的磁带寄给狱中的汉娜. 汉娜在出狱前一天在狱中自杀.
阶级 电影只让我感觉这是一段在年龄上悬殊的感情, 小说中细致描写了双方的家庭, 让我意识到这段感情在阶级上也是很不匹配的. 汉娜是一个底层文盲, 米夏是高级知识分子的家庭.
汉娜不识字, 经历坎坷, 十七岁去柏林, 在西门子做女工, 参加了一战, 战争后找了所有能干的工作, 认识米夏的时候在做公交车检票员这种简单工作.
而米夏的父亲是一位哲学教授, 白天有学生排着队找他请教问题. 家里有着丰富的藏书, 他父亲自己还出过书.
看电影的时候, 我把自己想象成的是米夏, 一个男性角色. 读小说看到汉娜这么坎坷的经历, 能更多代入汉娜这个角色. 汉娜第一次来到米夏的家里, 看到他家有一面墙的藏书. 汉娜和米夏出去玩, 只能依赖米夏找餐馆点菜住宿, 这种无助的底层角色刚到大城市两眼一抹瞎的状态让我很代入, 我也羡慕别人能在家里有一面墙的藏书. 也想起了自己从村里到城市的大开眼界, 第一次出国住宿时候的茫然无措.
情侣的误会 电影里也有汉娜和米夏的吵架, 吵得莫名其妙, 读了小说才明白.
汉娜是公交车剪票员, 米夏拐去搭乘她那一班公交车. 公车有两节, 两节都没有乘客, 前一节有司机, 所以米夏想单独和汉娜相处, 就一直呆在第二节车厢. 但是汉娜迟迟不来找自己, 和司机聊天. 米夏很生气, 自己专门来看她, 她却不理自己, 后来在一个荒凉地方下车了, 哭着走回去.而汉娜是不懂米夏想和她单独相处才没去找她, 可能也是为自己干这么简单的工作而不好意思了, 以为米夏不来第一节车厢找自己因为自己的工作太傻了. 这两个人才互相在乎而互相生气.</description>
    </item>
    
    <item>
      <title>LaTex 转成 Word</title>
      <link>http://gggchen.github.io/post/latex2rtf/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/latex2rtf/</guid>
      <description>因为我电脑没有 word 软件, 而且更喜欢纯文本的格式, 写的文档都是 org, md 或者 tex 的. 最近写的论文, 因为公式众多, 还有很多文章内的交叉引用, 就用了 LaTex 来写, 交上了 PDF 格式. 学院竟然要求 word 版本, 让我很崩溃. 一个统计学院竟不支持 LaTex, 可能盗版就是力量吧. 抱怨的话就不宣泄了, 我还是转了.
Pandoc 是个好用的工具, 但是转换的效果并不好, 搜了一下, 有工具 latex2rtf. 可以把 latex 文件转换成带有复文本格式文件.
因为我的 tex 文件是含有中文字符的, 最简单的命令如下, 不能将中文字符正确转化, 生成的 rft 文件含有乱码.
latex2rtf yourfile.tex  搜搜看看, 需要下面两步来实现中文字符的正确转化: 1. 在 yourfile.tex 里加上 package 支持:
 \usepackage[utf8]{inputenc}   使用编码格式的转换命令:  latex2rtf -C utf8 yourfile.tex    其中, -C utf8 是控制编码格式, 详细可以查看 latex2rtf -h 了解</description>
    </item>
    
    <item>
      <title>《女性主义》读书笔记</title>
      <link>http://gggchen.github.io/post/feminism/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/feminism/</guid>
      <description>听说女权主义内部也是有众多流派的, 去年读了李银河的《女性主义》, 做了读书笔记, 今天整理一下. 因为从小在一个男权社会里生长, 难免潜移默化受到男权的价值观影响, 了解一下女权主义能更 liberal 一点. 而且李银河这本书挺学术地介绍了女权主义的各个流派, 介绍了各个流派的主要代表人物和思想, 相互的争执的点. 这本书是不错的女权主义的入门书籍, 推荐.
王小波写道, 这本书本来书名为《女权主义》, 但是审查部门不准许出现「女权」的字眼, 为了出版, 只好将 feminism 翻译为「女性主义」. 所以下面不沿用书中被审查后的字眼, 仍然采用「女权主义」称为各个流派.
全文都是对书中内容的引用, 分为两部分, 对一些议题的看法和女权主义的流派介绍.
男女区别 女权主义对于男女是否有差别, 也有不同的看法, 可以分为三种:
 强调男女相同: 男女平等, 两性的相似点超过不同点. 强调男女不同: 女性优于男性, 女性所具有的女性特征比如和平, 关爱, 养育等优于攻击好战毁灭等男性特征. 男女差别的无必要: 混淆两性界限, 人的差异并不足以产生对立两分的结果. 克服心灵、身体的两分, 身体是可变的, 不是不可变.  生育 一些女权主义者反对强加在女性身上的生育义务的. 比如波伏娃说, 一个人并非生下来就是女人, 而是变成女人的. 母性是使女性成为奴隶的最技巧的方法. 只要人们仍然认为女性的主要工作是养育小孩, 女性便不会投身政治、科技. 她们也便不会怀疑男人的优越性. 我们几乎不可能告诉女性洗碗是她们的神圣任务, 于是告诉她们养育孩子是她们的神圣任务.
费尔斯通 认为生育机制是女性受压迫的根源. 女性的生育功能造成两性不平等. 在孕产期, 女人的基本生活来源要依赖男人, 而人类婴儿有很长的育婴期, 这也导致了女性对男性的依赖. 她提出解决办法: 技术改造生育机制, 使生育得以在体外进行.
其他人也列举的不生育的好处:
 女性有更多时间过自己生活; 生育不应该决定女性的生活, 女性应当对自己的生活做出个人的决定.</description>
    </item>
    
    <item>
      <title>Emacs cannot find pdflatex PATH</title>
      <link>http://gggchen.github.io/post/pdflatex/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/pdflatex/</guid>
      <description>Problem description After installing Spacemacs, my org file cannot export to PDF file, the following error message always pops out:
command not found: pdflatex  Solution It finally turns out it is my Macbook move /usr/texbin to /Library/TeX/texbin, according to this answer, I added export PATH=&amp;quot;$PATH:/Library/TeX/texbin&amp;quot;to my .zshrc. and then
source .zshrc  to update my settings.
After restarting my emacs, finally Emacs can export org file to PDF file.</description>
    </item>
    
    <item>
      <title>Debug Ocenaudio</title>
      <link>http://gggchen.github.io/post/ocenaudio/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/ocenaudio/</guid>
      <description>Oceanaudio is a good and beautiful software to edit audio documents. But recently, ocenaudio on my Macbook is very unstable, the sound it plays is too strange, just like somepeople talk with her/his mounth closed.
I&amp;rsquo;v tried substitutes to ocenaudio, like Audacity and Ardour, but UI of Audacity is bad designed and Ardour 5 is for people to record and edit, not for me.
I finally fixed the problem on my Ocenaudio.</description>
    </item>
    
    <item>
      <title>Warning on Replace Broken iPhone Screen</title>
      <link>http://gggchen.github.io/post/iphone-screen/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/iphone-screen/</guid>
      <description>Most articles describe replacement of iPhone screen or battery cells as easy, something to repair a Thinkpad person computer. but they fail to underline the possible risk.
I changed my iPhone 6s broken screen this month but failed. I bought a new screen along with a repair kit from Amazon.
I was excited once I received the package because I envision I could say goodbye to this broken screen and have a brand new iPhone.</description>
    </item>
    
    <item>
      <title>稍后读并且存档</title>
      <link>http://gggchen.github.io/post/read-it-later/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/read-it-later/</guid>
      <description>解决的问题:
 长文章当时读不完就收藏了, 但是收藏的文章从来不会读完 读过的文章没有将整个网页保存起来, 以后网页一旦失效, 就找不到了  解决方法:
 使用 Pocket 或者 Instapaper 使用 ifttt 将 Pocket 读完的文章自动存档到 Evernote  稍后读 之前在 Safari Reading List, Evernote 等地方收藏了一堆的文章, 但是我从来不读. 就像一直戏谑的, read it later 变成 read it never. 后来听了 Checked 某一期的博客, 认识到了而且可以用 Pocket 或者 Instapaper 解决, 就开始使用了这个 Pocket 作为稍后读的工具.
我的稍后读流程  浏览 RSS 订阅的消息. 我使用 Reeder3 来订阅 RSS 源, 如果觉得读某一篇时觉得一时没有时间读, 就用 Reeder3 发送到 Pocket 平时各种空闲时间, 不打开微信各种社交软件, 而是打开 Pocket 查看之前收藏的文章, 这样一天大概是能够把之前加入的文章读完的 在 Pocket 读完的文章, 勾选读完之后, ifttt 会自动帮我把文章全文存档到 Evernote  下面详细说明利用 ifttt 存档到 Evernote</description>
    </item>
    
    <item>
      <title>SML mode in Spacemacs</title>
      <link>http://gggchen.github.io/post/sml/</link>
      <pubDate>Sat, 13 May 2017 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/sml/</guid>
      <description>SML REPL in Spacemacs After installing sml and adding a sml layer in my spacemacs, I typed C-c-C-s or M-x sml RET, a sml REPL did not show up. An error message showed up instead:
{% codeblock lang:sh %} sml: no such file or directory {% endcodeblock %}
But I could type sml to start a sml REPL in my terminal. It turned out I should add the sml path to my emacs.</description>
    </item>
    
    <item>
      <title>learn how to learn</title>
      <link>http://gggchen.github.io/post/learn_motivate/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/learn_motivate/</guid>
      <description>以前对于如何学习有着不很系统的, 基于我自己经验的了解, 学习了 C站上的learn how to learn 课程之后, 才知道学习背后的生理上和心理上的原因, 还改变了之前一些错误的认识, 像以为通宵熬夜学习是学习的好方法.
强烈推荐跟着学一下这门课.
chunks 什么是 chunk? 大脑形成的一群相互连接的神经元, 所以能够顺利完成一系列动作. 最好的 chunk 是这样, 一旦这个chunk 形成了, 不需要记住所有细节, 下意识就可以完成一个动作. 《倚天屠龙记》中赵敏找武当的麻烦, 张无忌需要短时间跟张三丰学会太极剑, 张无忌临时学了然后又自己演练了一会, 张三丰问他还记得多少, 张无忌说还记得一两招, 张三丰就等无忌又练了一段, 最后张无忌回答说他已经完全忘记了, 张三丰说你可以上了.
 例子  学习的过程是循序渐进的, 最开始是小的 chunk, 最后小 chunk 连起来形成大的 chunk
 通过学习一门新语言, 比如日语, 从50音图开始, 学习语音语调, 掌握词汇, 后来能够根据情景流畅地说出一个句子. 学会骑自行车之后, 就能协调地在平衡的情况下蹬脚蹬. 弹吉他, 先练习指法, 练习一个个片段, 最后熟练弹奏一段曲子 学数学, 最开始试图解答一个问题, 需要的认知负荷很大, 最好先用例子明白核心和背后的原则, 然后再看概念. 类似先依照地图走到想去的地方, 最后自己不需要地图也能够走到. 熟悉例子之后, 思考为什么每一步要这样走, 为什么在这个时候走这一步.  怎样形成 chunk? 怎样形成一个 chunk, 不管是体育训练肌肉记忆, 还是思维训练解决一个问题, 都是类似的:</description>
    </item>
    
    <item>
      <title>中年男人的放飞自我</title>
      <link>http://gggchen.github.io/post/comeing_up_for_air/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/comeing_up_for_air/</guid>
      <description>&lt;p&gt;人在任何时候都会危机, 其中中年危机好像尤为明显. 最近读了两本中年危机追寻人生意义的小说, 一本是毛姆的《月亮和六便士》, 另一本是乔治奥威尔的《上来透口气》. 乔治奥威尔完胜, 我很喜欢这本小说, 也很推荐阅读.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>机器学习中的线性回归</title>
      <link>http://gggchen.github.io/post/ml-regression/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/ml-regression/</guid>
      <description>模型 hypothesis $$ h_{\theta}= \theta X = {\sum}_{i=1}^{n} x_i&amp;rsquo; \theta $$
其中：
X is a m x n matrix n is the number of the features m is the number of training examples.  gradient \[ \theta_j :=\theta_j- \alpha \frac{\partial}{\partial \theta_j} J(\theta_j) \] 写成矩阵形式即： \[ \theta := \theta - \alpha X^T(X \theta - y) \]
cost function: \[ J(\theta) = \frac12 {(X \theta - y)}^T (X \theta - y) = \frac12 \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2 \]</description>
    </item>
    
    <item>
      <title>和 hexo 斗志斗勇</title>
      <link>http://gggchen.github.io/post/hexo_bug/</link>
      <pubDate>Fri, 27 Nov 2015 00:00:00 +0100</pubDate>
      
      <guid>http://gggchen.github.io/post/hexo_bug/</guid>
      <description>没想到想用个 blog 还这么麻烦。最初为了让大陆访问快一点，捣鼓半天把 blog 放在 github 和 gitcafe 上，配置麻烦不说， gitcafe 总是有问题。所以我的 blog 从国外可以正常访问，从国内访问总是有问题。虽然最后能够实现国内外不同访问，总是出错还是怪麻烦，没办法最后弃用 gitcafe 。
更新：用了 hexo 快一年了，博客没写几篇，尽捣鼓怎么解决 hexo 的 bug 了，很多问题搜也搜不出来，我的内心是崩溃的啊，今天终于再一次把博客配置好了。把之前跳过的坑都一一表明，希望像我一样的小白用户能够避开。
上一次被 hexo 整崩溃之后，还试了试用 Django 在 DigitalOcean 上面搭博客，博客是搭好了，但是怎么展示数学公式什么的比 hexo 还麻烦，DigitalOcaen 还要交钱，我还天天担心自己服务器被黑。天啊，两害相轻，还是回到了 hexo。
权限问题 sudo 最初我的 hexo 会有以下的错误错误：
输入：
$hexo deploy  后，会出现这样的错误：
INFO Deploying: git INFO Clearing .deploy folder... FATAL Something&#39;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html Error: EACCES, unlink &#39;/Users/xxx/Documents/xxx/.deploy_git/archives/index.html&#39;  这样应该hexo deploy的命令前面加上sudo，也就是：
$ sudo hexo deploy  github 连接问题 当然还可能是其他问题，比如说是 github 的问题，可以使用ssh -T git@github.</description>
    </item>
    
    <item>
      <title>阅读GRE文章的正确姿势</title>
      <link>http://gggchen.github.io/post/gre_reading/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/gre_reading/</guid>
      <description>阅读做题的步骤  看长阅读还是短阅读 看看题目数目 看看第一题 读文章＋7原则＋做骨架＋找中心 做题 general题目还是detail  做题的姿势  桉顺序做题 遇到难题排除 实在不行猜一个，不要留着以后做 mark一下 有空回头看看  排除法的标记：
A. X B. √ C. ~  如何正确地读 要关注结构，积极高效地读：最开始读得慢，抓住重点，后来读得快。先看题目再在原文中找，或者太抓细节都是不高效的方式。
七原则
 投入：a 哄自己开心：“太好了，下面6分钟我可以了解一下海啸。”b 辨别好坏，如果海洋受到A的威胁，对A生气，这个坏家伙！ 找简单故事：几个字概括 读→大脑形成图像 正在读的和刚读过的联系起来：支持还是反对，有无回答之前的问题 注意信号：分段和信号词 加快速度别陷入细节，除了：段落开头，Big Surprise, Big Result  ** Point 是核心**
我：不加分辨地读全文→做题→被难题困住→读文章→随便猜一个
更好：抓住文章结构
短文章 一道题：快速读后选
3道题：理解文章
** 做笔记**
 每段中心 Big Suprise Big Result 读完后找全文中心  长文章  首段细细读 剩下段落找中心以及在全文中的作用，细节略去，需要时再读细节。 别读细节，还会起反作用，不仅理解不了中心，而且细节题靠记忆不靠谱，还得回文定位才好 读完找中心  题型 general questions 不用读文章，直接做题</description>
    </item>
    
    <item>
      <title>亚马逊的推荐系统</title>
      <link>http://gggchen.github.io/post/recommendations/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0200</pubDate>
      
      <guid>http://gggchen.github.io/post/recommendations/</guid>
      <description>协作型过滤collaborative filtering 对一大群人进行搜索，并从中找出与我们品味相近的一小群人。
搜集偏好 对于python，是使用一个嵌套的字典，大型网站可建立数据库
对相似度评价 欧几里德距离：在坐标轴中的距离
皮尔逊相关度：即使一个人比另一个人对同一个物品评分都高，但是高的程度一致，也认定是相关。
其他相关方法：jaccard系数或曼哈顿距离算法还有其他算法都行，只要以一个浮点数作为返回值，而且数值越大相似度越大。最后会看到采用什么相似度评价方法，对结果影响不大。
推荐物品 需要利用已有用户的加权来对目标用户进行推荐，也就是对目标用户没有看的电影进行打分，加权的方式是： 假设 $ P_i $ 是其他用户，$ P_i $ 和目标用户的相似度是$ s_i $，$ X_i $是目标用户没看过的电影，$ P_i $对$ X_i $的打分为$ M_i $，那么对$ X_i $ 的打分$ R_i $可以表示为：
$$ R_i = \frac{\sum M_i s_i}{\sum si}$$
接下来根据目标用户所有没看过的电影，按照打分$ R_i $进行排序，分高的优先推荐。
求和的是刚好看过目标客户没看过的这部电影的其他用户数。
匹配商品 上述方法称为基于用户的协作型过滤(user-based collaborative filtering)，对于像Amazon这样存在上百万客户的大型网站，对每个用户和其他用户比较，再对每位用户评过分的商品比较，速度可能很慢；而且商品过多，用户偏好方面彼此很少会有重叠，用户相似性难以判断。所以要使用另外的方法，称为基于物品的协作型过滤(item-based collaborative filtering)可以将大量计算任务预先执行，能够更快地推荐。物品间变化不像用户间比较那么频繁，不需要不停计算每样物品相似的其他物品，可以将计算安排在网络流量不大的时候进行，或者独立于主应用之外的另一台计算机单独进行。
根据人群对某两件商品的评分确定两件商品的相关系数，负数表示喜欢一件商品会存在讨厌另一件商品的倾向。根据相关系数建立每一件商品和其他商品的相似度列表数据集。
目标客户看过的电影$ Y_i $评分为$ M_i $，没看过的电影$ X_i $ 和$ Y_i $的相似度为$ s_i $，对$ X_i $的评分为$ R_i $:
$$R_i = \frac{\sum M_i s_i} {\sum s_i} $$</description>
    </item>
    
  </channel>
</rss>